// http://www.lintcode.com/en/problem/wood-cut/

/*
这道题因为是从原来的木头中切割下来，所以要找的结果，如果存在的话，肯定是在0-maxlen之间，
所以我们首先遍历一遍数组，找到最长的长度。然后就是在这个区间内找到一个复合条件的最大值，
很显然，在连续递增区间内找一个值应该用二叉搜索法。
应该注意的是，如果一个值满足条件，不应当立即返回，因为可能有很多个满足条件的值，而且
例如在mid位置处count >= k了，更变范围条件应该是low = mid而不是low = mid + 1。这个时候
如果简单的这样操作可能会造成溢出，因为可能当前的区间只有两个数，所以mid == low，所以一直
反复进行下去都将是mid = low循环不会终止。所以这种不能舍弃mid的情况下，我们应该将mid和
mid + 1的值进行判断，如果mid + 1的值也满足条件这个时候我们知道mid可舍去了，所以low = mid + 1
如果mid + 1的值不满足条件，就直接返回mid即可。另外因为不一定存在1 - maxlen的值肯定复合条件，
所以while循环不能为while（true）
*/
    public int woodCut(int[] L, int k) {
        // write your code here
        int maxLen = Integer.MIN_VALUE;
        for (int len : L){
            if (len > maxLen) maxLen = len;
        }
        int low = 1;
        int hi = maxLen;
        
        while (low <= hi){
            int mid = low + (hi - low) / 2;
            int count = 0;
            for (int len : L){
                count = count + len / mid;
            }
            if (count >= k) {
                int tmp = mid + 1;
                int tmpcount = 0;
                for (int len : L){
                    tmpcount = tmpcount + len / tmp;
                }
                if (tmpcount < k) return mid;
                else low = mid + 1;
            }
            else hi = mid - 1;
        }
        return 0;
    }
    
