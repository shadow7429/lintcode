// http://www.lintcode.com/en/problem/jump-game/

/*
这道题的思路是：
只要使得整个数组是连着的就能保证可以从开始跳到最后，那么能够跳跃的条件是每个位置都至少是1，
如果一个位置上是0，那么就说明该位置不能跳跃，所以就需要前面的位置可以跳跃的格数>1，这样就
能略过为0的位置，那么我们就从倒数第二个位置看起，如果该位置的数字大于need数（初始为1），
那么就向前看，如果该位置为0，那么就将need加1，最后逆向遍历完，要检测need，如果need仍为初始
的1，那么就说明是可以跳跃完成的，则返回true，若need大于1，就说明前面的无法弥补后面的洞，
则返回false；
*/
public class Solution {
    /**
     * @param A: A list of integers
     * @return: The boolean answer
     */
    public boolean canJump(int[] A) {
        // wirte your code here
        if (A.length <= 1) return true;
        int need = 1;
        for (int i = A.length - 2; i >= 0; i--){
            if (A[i] > need) need = 1;
            else if (A[i] == 0) need++;
        }
        if (need > 1) return false;
        return true;
    }
}
