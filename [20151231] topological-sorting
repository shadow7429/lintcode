// http://www.lintcode.com/en/problem/topological-sorting/


/*
图的题一般都是先count出来每个节点的入度，然后再遍历图的过程中，改变其他节点的入度，完成各种操作。
这道题的思路就是，我们肯定是要从入度为0的点开始出发，过程就相当于BFS，只是这里的层不单单是简单
的下一层，因为图里面可能出现环或者是多个节点指向一个节点，因此从不同路径下来，一个节点可能处于
不同的层，因此这里我们就用入度的变化来进行层的划分。
操作的过程具体分为以下几步：
(1) 遍历一遍输入的List，计算出每一个节点的入度
(2) 对于入度为0的点（应该首先加入到list中的）加入到一个List中 => set
(3) set中的节点即为现在应该依次加入到list中的节点，remove出来每一个加入到output的list中，并且对于每一个
节点，找到它的neighbors，将这些neighbor的入度均减一，若某个neighbor的入度更新为0，将它放入到set中，
即为接下来可以加入output中的节点。
*/
public class Solution {
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */    
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        ArrayList<DirectedGraphNode> list = new ArrayList<DirectedGraphNode>();
        LinkedList<DirectedGraphNode> set = new LinkedList<>();
        HashMap<DirectedGraphNode, Integer> indegree = new HashMap<DirectedGraphNode, Integer>();
        for(DirectedGraphNode n : graph){
            ArrayList<DirectedGraphNode> neighbors = n.neighbors;
            if (neighbors.size() == 0) continue;
            for (DirectedGraphNode neighbor : neighbors){
                if (!indegree.containsKey(neighbor)) indegree.put(neighbor, 1);
                else indegree.put(neighbor, indegree.get(neighbor) + 1);
            }
        }
        for (DirectedGraphNode n : graph){
            if (!indegree.containsKey(n)) set.add(n);
        }
        while (!set.isEmpty()){
            DirectedGraphNode n = set.removeFirst();
            list.add(n);
            ArrayList<DirectedGraphNode> neighbors = n.neighbors;
            if (neighbors.size() == 0) continue;
            for (DirectedGraphNode neighbor : neighbors){
                int num = indegree.get(neighbor);
                if (num == 0) continue;
                indegree.put(neighbor, num - 1);
                if (num - 1 == 0){
                    if (!set.contains(neighbor) && !list.contains(neighbor)) {
                        set.add(neighbor);
                    }
                }
            }
        }
        return list;
    }
}
