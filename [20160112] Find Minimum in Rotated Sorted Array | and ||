// http://www.lintcode.com/en/problem/find-minimum-in-rotated-sorted-array/

// 1
    public int findMin(int[] num) {
        // write your code here
        int low = 0;
        int hi = num.length - 1;
        
        while (true){
            if (low == hi) return num[low];
            else if (low == hi - 1) return Math.min(num[low], num[hi]);
            
            int mid = low + (hi - low) / 2;
            if (num[mid] > num[low] && num[mid] < num[hi]) return num[low];
            else if (num[mid] > num[low]) low = mid + 1;
            else if (num[mid] < num[low]) hi = mid;
        }
    }
    
// 2

    public int findMin(int[] num) {
        // write your code here
        if (num == null || num.length == 0) return 0;
        return helper(num, 0, num.length - 1);
    }
    public int helper(int[] num, int low, int hi){
        if (low == hi) return num[low];
        int mid = low + (hi - low) / 2;
        if (num[low] < num[hi]) return num[low];
        if (num[mid] == num[low]){
            int min1 = helper(num, low, mid);
            int min2 = helper(num, mid + 1, hi);
            return Math.min(min1, min2);
        }
        else if (num[mid] > num[low]) return helper(num, mid + 1, hi);
        else return helper(num, low, mid);
    }
