// http://www.lintcode.com/en/problem/fast-power/

    public int fastPower(int a, int b, int n) {
        // write your code here
        if (n == 0 || a == 1) return 1 % b;
        if (a == 0) return 0;
        boolean reverse = false;
        if (n < 0) reverse = true;
        n = Math.abs(n);
        int res = (int)helper(a, b, n);
        return reverse == true ? 1 / res : res;
    }
    public long helper(int a, int b, int n){
        if (n == 0) return (long) 1 % b;
        if (n == 1) return (long) a % b;
        long res = 0;
        res = helper(a, b, n / 2);                    //----------- （1）
        res = res * res;
        res = res % b;
        if (n % 2 == 1) res = res * helper(a, b, 1);  //------------这一步的原因是如果n为奇数（如7），上面（1）中n / 2
                                                      //------------为3，少了1，所以这里我们将它补回来。
        res = res % b;
        return res;
    }
