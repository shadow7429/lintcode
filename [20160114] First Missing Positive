// http://www.lintcode.com/en/problem/first-missing-positive/

/*
这道题因为题目有复杂度限制，所以不能将数组先进行排序，并且因为是如果全部符合条件，
数组应该是从1到A.length。例如数组[0,-1,3,1,5,4]这个数组如果是复合条件的话，应该是[1,2,3,4,5,6]
也就是数字i应该出现在A[i - 1]位置处，所以我们就从头开始遍历：
i = 0， A[i] = 0不用换位置，因为这个数字不应该出现在数组中。
i = 1,  A[i] = -1同理
i = 2,  A[i] = 3它应该出现在A[2]处，所以合理
i = 3,  A[i] = 1它应该出现在A[0]处，并且这个时候的A[0]位置处并不是1，所以进行交换此时数组变为[1,-1,3,0,5,4]
因为进行了交换i仍为3
i = 3,  A[i] = 0不用理会
i = 4,  A[i] = 5应该出现A[4]处，所以符合。
i = 5,  A[i] = 4应该出现A[3]处，并且A[3] != 4所以交换，此时数组变为[1,-1,3,4,5,0]
i = 5， A[i] = 0不用理会。
遍历完之后，我们已经将存在的正数都放在了该出现的位置上，所以现在只需要遍历一遍，如果哪里的A[i] != i + 1就返回这个i + 1;
*/
public class Solution {
    public int firstMissingPositive(int[] A) {
        int i = 0;
        while(i < A.length){
            if(A[i] == i+1 || A[i] <= 0 || A[i] > A.length) i++;
            else if(A[A[i]-1] != A[i]) swap(A, i, A[i]-1);
            else i++;
        }
        i = 0;
        while(i < A.length && A[i] == i+1) i++;
        return i+1;
    }

    private void swap(int[] A, int i, int j){
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
}
