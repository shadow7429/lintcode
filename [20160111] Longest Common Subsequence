// http://www.lintcode.com/en/problem/longest-common-subsequence/
// reference: http://baike.baidu.com/view/2020307.htm
/*
这道题需要先弄清的一点是【Subsequence可不连续】
动态规划的方法如下：
以两个字符串A 和 B为例：
用一个二维数组helper[i][j]来表示A的i位和B的j位之前的最长供供子序列的长度，
所以helper[1][1] = 1 if A.charAt(0) == B.charAt(0).
所以对于任意一个i和j来说helper[i][j] = Math.max(helper[i - 1][j - 1] + add, Math.max(helper[i][j - 1], helper[i - 1][j]))
这里面add是指A.charAt(i - 1) == B.charAt(i - 1);
然后整个循环的过程中用res来记录出现过的最大值。
*/

    public int longestCommonSubsequence(String A, String B) {
        if (A.length() == 0 || B.length() == 0) return 0;
        if (A.length() == 1){
            if (B.indexOf(A.charAt(0)) != -1) return 1;
        }
        else if (B.length() == 1){
            if (A.indexOf(B.charAt(0)) != -1) return 1;
        }
        int[][] helper = new int[A.length() + 1][B.length() + 1];
        int res = 0;
        for (int i = 0; i < A.length(); i++){
            for (int j = 0; j < B.length(); j++){
                int add = A.charAt(i) == B.charAt(j) ? 1 : 0;
                helper[i + 1][j + 1] = Math.max(helper[i][j] + add, Math.max(helper[i + 1][j], helper[i][j + 1]));
                res = Math.max(res, helper[i + 1][j + 1]);
            }
        }
        return res;
    }
