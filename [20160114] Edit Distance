// http://www.lintcode.com/en/problem/edit-distance/#


/*
采用动态规划法：
用一个二维数组helper[i][j]来表示用word1的前i个字母来转化成word2的前j个字母需要的最少的操作数；
所以当word1.charAt(i) == word2.charAt(j)的时候，可以知道，在该对应位置不需要操作，所以helper[i + 1][j + 1] = helper[i][j];
但是当不相等的时候，可以进行三个操作：insert，delete，replace。
（1）可以知道replace只需要将对应的word1.charAt(i)改变成word2.charAt(j)即可，所以helper[i + 1][j + 1] = helper[i][j] + 1 (replace 一次);
（2）insert 的时候，因为i位置已经不符合了，所以我们在i位置之后insert进来一个word2.charAt(j), 所以当前word1.charAt(i + 1) == word2.charAt(j)
     那么此时就跟前面讨论的相等的情况一样，所以此时helper[i + 1][j + 1] = helper[i + 1][j] + 1;
（3）delete跟insert相似的原理。
那么每一个不相同的位置可以进行这三种操作的选择，我们就选择三个中比较小的，所以就有下面的解法。
*/
    public int minDistance(String word1, String word2) {
        // write your code here
        int[][] helper = new int[word1.length() + 1][word2.length() + 1];
        for (int i = 0; i <= word1.length(); i++) helper[i][0] = i;
        for (int i = 0; i <= word2.length(); i++) helper[0][i] = i;
        for (int i = 0; i < word1.length(); i++){
            for (int j = 0; j < word2.length(); j++){
                if (word1.charAt(i) == word2.charAt(j)){
                    helper[i + 1][j + 1] = helper[i][j];
                }
                else{
                    int a = helper[i][j];
                    int b = helper[i + 1][j];
                    int c = helper[i][j + 1];
                    helper[i + 1][j + 1] = Math.min(Math.min(a, b), c) + 1;
                }
            }
        }
        return helper[word1.length()][word2.length()];
    }
