// http://www.lintcode.com/en/problem/container-with-most-water/


/*
双层循环的方法： O(n^2)
*/
public class Solution {
    /**
     * @param heights: an array of integers
     * @return: an integer
     */
    public int maxArea(int[] heights) {
        // write your code here
        int res = 0;
        for (int i = 0; i < heights.length; i++){
            for (int j = 0; j <= i; j++){
                int tmp = Math.min(heights[i], heights[j]) * (i - j);
                res = Math.max(res, tmp);
            }
        }
        return res;
    }
}

/*
相当于遍历了一遍O(n)
这个方法的思路是：
从两边向中间逼近，每次对res取之前的res和现在volumn的较大值。这里要思考的是对于两边来说，我们肯定下一个
四边形如果要保留现在两边中的一边，肯定是要保留较大的一边，所以我们就对较小的一边进行改变，进而得到下一个res。
*/

public class Solution {
    public int maxArea(int[] height) {
        if (height.length == 0 || height.length == 1) return 0;
        int lo = 0;
        int hi = height.length - 1;
        int res = 0;
        while (lo < hi){
            res = Math.max(res, (hi - lo) * Math.min(height[lo], height[hi]));
            if (height[lo] > height[hi]) hi--;
            else lo++;
        }
        return res;
    }
}
